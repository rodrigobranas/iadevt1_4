---
alwaysApply: false
---
# Project Folder Structure

## Clean Architecture Organization

The project follows Clean Architecture principles with clear separation of concerns:

```
├── src/
│   ├── application/         # Application Business Rules
│   │   ├── usecase/         # Application-specific business rules
│   │   ├── service/         # Application services
│   │   ├── event/          # Domain event handlers
│   │   ├── factory/        # Object creation factories
│   │   └── di/             # Dependency injection configuration
│   │
│   ├── domain/             # Enterprise Business Rules
│   │   ├── entity/         # Business entities
│   │   ├── vo/            # Value objects
│   │   ├── service/       # Domain services
│   │   └── event/         # Domain events
│   │
│   └── infra/              # Frameworks & Drivers
│       ├── database/       # Database connections and configurations
│       ├── orm/           # ORM mappings and configurations
│       ├── dao/           # Data Access Objects
│       ├── controller/    # HTTP controllers
│       ├── http/          # HTTP server and middleware
│       ├── queue/         # Message queue implementations
│       ├── repository/    # Repository implementations
│       └── gateway/       # External service gateways
│
└── test/
    ├── unit/              # Unit tests (no external dependencies)
    └── integration/       # Integration tests (with external dependencies)
```

## Layer Responsibilities

### Application Layer (`/src/application`)
- **Use Cases**: Orchestrate the flow of data to and from entities
- **Services**: Application-specific business logic
- **Events**: Handle domain events at application level
- **Factories**: Create complex objects and aggregates
- **DI**: Wire up dependencies and configure IoC container

### Domain Layer (`/src/domain`)
- **Entities**: Core business objects with identity
- **Value Objects**: Immutable objects without identity
- **Domain Services**: Business logic that doesn't fit in entities
- **Domain Events**: Important business events

### Infrastructure Layer (`/src/infra`)
- **Database**: Database connection management
- **ORM**: Object-relational mapping configuration
- **DAO**: Direct database access when needed
- **Controllers**: Handle HTTP requests/responses
- **HTTP**: Express server setup and middleware
- **Queue**: Message broker implementations
- **Repository**: Data persistence implementations
- **Gateway**: External API integrations

### Test Layer (`/test`)
- **Unit Tests**: Fast, isolated tests for business logic
- **Integration Tests**: Tests with real external dependencies

## Key Principles

1. **Dependency Direction**: Dependencies point inward (Infrastructure → Application → Domain)
2. **Domain Independence**: Domain layer has no external dependencies
3. **Framework Isolation**: Business logic is independent of frameworks
4. **Testability**: Each layer can be tested independently
5. **Separation of Concerns**: Each directory has a single, well-defined purpose

## File Naming Conventions
- Use **kebab-case** for all file names
- Examples:
  - `user-service.ts`
  - `create-order-usecase.ts`
  - `payment-repository.ts`

## Module Organization
- One class/interface per file (preferred)
- Group related types in single file when cohesion is high
- Export from index files for clean imports# Project Folder Structure

## Clean Architecture Organization

The project follows Clean Architecture principles with clear separation of concerns:

```
├── src/
│   ├── application/         # Application Business Rules
│   │   ├── usecase/         # Application-specific business rules
│   │   ├── service/         # Application services
│   │   ├── event/          # Domain event handlers
│   │   ├── factory/        # Object creation factories
│   │   └── di/             # Dependency injection configuration
│   │
│   ├── domain/             # Enterprise Business Rules
│   │   ├── entity/         # Business entities
│   │   ├── vo/            # Value objects
│   │   ├── service/       # Domain services
│   │   └── event/         # Domain events
│   │
│   └── infra/              # Frameworks & Drivers
│       ├── database/       # Database connections and configurations
│       ├── orm/           # ORM mappings and configurations
│       ├── dao/           # Data Access Objects
│       ├── controller/    # HTTP controllers
│       ├── http/          # HTTP server and middleware
│       ├── queue/         # Message queue implementations
│       ├── repository/    # Repository implementations
│       └── gateway/       # External service gateways
│
└── test/
    ├── unit/              # Unit tests (no external dependencies)
    └── integration/       # Integration tests (with external dependencies)
```

## Layer Responsibilities

### Application Layer (`/src/application`)
- **Use Cases**: Orchestrate the flow of data to and from entities
- **Services**: Application-specific business logic
- **Events**: Handle domain events at application level
- **Factories**: Create complex objects and aggregates
- **DI**: Wire up dependencies and configure IoC container

### Domain Layer (`/src/domain`)
- **Entities**: Core business objects with identity
- **Value Objects**: Immutable objects without identity
- **Domain Services**: Business logic that doesn't fit in entities
- **Domain Events**: Important business events

### Infrastructure Layer (`/src/infra`)
- **Database**: Database connection management
- **ORM**: Object-relational mapping configuration
- **DAO**: Direct database access when needed
- **Controllers**: Handle HTTP requests/responses
- **HTTP**: Express server setup and middleware
- **Queue**: Message broker implementations
- **Repository**: Data persistence implementations
- **Gateway**: External API integrations

### Test Layer (`/test`)
- **Unit Tests**: Fast, isolated tests for business logic
- **Integration Tests**: Tests with real external dependencies

## Key Principles

1. **Dependency Direction**: Dependencies point inward (Infrastructure → Application → Domain)
2. **Domain Independence**: Domain layer has no external dependencies
3. **Framework Isolation**: Business logic is independent of frameworks
4. **Testability**: Each layer can be tested independently
5. **Separation of Concerns**: Each directory has a single, well-defined purpose

## File Naming Conventions
- Use **kebab-case** for all file names
- Examples:
  - `user-service.ts`
  - `create-order-usecase.ts`
  - `payment-repository.ts`

## Module Organization
- One class/interface per file (preferred)
- Group related types in single file when cohesion is high
- Export from index files for clean imports