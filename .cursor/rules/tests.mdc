---
alwaysApply: false
---

# Testing Standards (Monorepo: Bun backend, Vite React frontend)

## Testing Frameworks

- Backend (Bun): use `bun test` with built-in test runner
- Frontend: prefer `@testing-library/react` with `vitest` if/when tests are added

## Commands

- Backend: `bun test`
- Frontend: `vitest` (configure scripts as needed)

## Test Organization

### Directory Structure

- Place tests under `/test`
- Do not place tests inside `/src`
- Suggested structure:
  - `/test/unit` — Unit tests (no external deps)
  - `/test/integration` — Integration tests (HTTP, external APIs)

### File Naming

- Use `.test.ts` or `.test.tsx` suffix
- Pattern: `feature-name.test.ts`

## Design Principles

- Tests are independent and runnable in isolation
- Follow Arrange-Act-Assert (or Given-When-Then)
- Mock time-dependent code; avoid flaky timing

## Categories

### Integration Tests

- External resources: HTTP requests, APIs
- Prefer hitting local Hono server endpoints where applicable

### Unit Tests

- Pure logic: utilities, hooks, domain objects

## HTTP Endpoint Testing (Backend)

- Start the Hono app using Bun runtime where needed
- Avoid heavyweight HTTP client libraries; use native `fetch`
- Validate: status codes, response shape, and error cases

## Best Practices

- One behavior per test
- Keep tests small and focused
- Ensure meaningful assertions beyond happy path
- Clean up resources in `afterEach`/`afterAll`

## Example (Bun test)

```typescript
import { describe, it, expect } from 'bun:test';

describe('sum', () => {
  it('adds two numbers', () => {
    expect(1 + 2).toBe(3);
  });
});
```
