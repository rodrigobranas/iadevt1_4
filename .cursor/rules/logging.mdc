---
alwaysApply: false
---

# Logging Standards (Bun + Hono)

## Runtime Logging

- Use structured logs to stdout/stderr; avoid file transports
- For backend, prefer a minimal wrapper around `console` or Bun-compatible loggers
- Frontend should log only during development and avoid sensitive data

## Log Levels

### DEBUG

- Detailed diagnostics: function entry/exit, variable values, request/response snippets (sanitized)
- Disabled in production by default

### INFO

- Normal application flow: server startup, configuration loaded, successful operations

### WARN

- Non-fatal issues: retries, degraded behavior, deprecated usage

### ERROR

- Errors requiring attention: exceptions, failed API calls

## Best Practices

### Output Configuration

- Do not write log files directly; stream to stdout/stderr
- Rely on the environment (Docker/Proc managers) for aggregation

### Sensitive Data

- Never log secrets, tokens, passwords, or PII
- Mask identifiers when necessary

### Message Clarity

- Keep messages concise and include contextual fields
- Prefer JSON-like objects for additional metadata

## Hono Examples

```typescript
app.use('*', async (c, next) => {
  const start = Date.now();
  await next();
  const duration = Date.now() - start;
  console.info('request.complete', {
    method: c.req.method,
    path: c.req.path,
    status: c.res.status,
    duration,
  });
});

try {
  // ... handler logic
} catch (error) {
  console.error('handler.error', {
    message: (error as Error).message,
    stack: (error as Error).stack,
  });
  throw error;
}
```

## Environments

- Development: `debug`
- Staging: `info`
- Production: `warn` or `error`
